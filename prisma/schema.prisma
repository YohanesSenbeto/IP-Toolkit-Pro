generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  password      String?
  role          Role             @default(CLIENT)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

<<<<<<< HEAD
  // Back relation to ProviderProfile (1:1)
  providerProfile ProviderProfile?

  // Relations
=======
  // ✅ Back relation to ProviderProfile (1:1)
  providerProfile ProviderProfile?

  // ✅ Relations
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
  requests      Request[]        @relation("ClientRequests")
  proposals     Proposal[]       @relation("UserProposals")
  reviews       Review[]         @relation("UserReviews")
}

model ProviderProfile {
  id          String      @id @default(cuid())
  userId      String      @unique
<<<<<<< HEAD
  user        User        @relation(fields: [userId], references: [id])  // one-to-one link to User
=======
  user        User        @relation(fields: [userId], references: [id])  // ✅ one-to-one link to User
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b

  skills      String[]
  bio         String?
  services    Service[]
  proposals   Proposal[]
  reviews     Review[]    @relation("ProviderReviews")
}

model Service {
  id          String           @id @default(cuid())
  providerId  String
  provider    ProviderProfile  @relation(fields: [providerId], references: [id])
  title       String
  description String
  price       Float
  createdAt   DateTime         @default(now())
<<<<<<< HEAD
  updatedAt   DateTime         @updatedAt
}

model Request {
  id          String        @id @default(cuid())
  clientId    String
  client      User          @relation("ClientRequests", fields: [clientId], references: [id])
=======
}

model Request {
  id          String      @id @default(cuid())
  clientId    String
  client      User        @relation("ClientRequests", fields: [clientId], references: [id])
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
  title       String
  description String
  status      RequestStatus @default(PENDING)
  proposals   Proposal[]
<<<<<<< HEAD
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) // ✅ default to current time
  payments    Payment[]
}

model Proposal {
  id          String        @id @default(cuid())
  providerId  String
  provider    ProviderProfile @relation(fields: [providerId], references: [id])
  clientId    String
  client      User          @relation("UserProposals", fields: [clientId], references: [id])
  requestId   String
  request     Request       @relation(fields: [requestId], references: [id])
  price       Float
  message     String?
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) // ✅ default to current time
=======
  createdAt   DateTime     @default(now())

  payments    Payment[]   // ✅ renamed field to lowercase for convention
}

model Proposal {
  id          String      @id @default(cuid())
  providerId  String
  provider    ProviderProfile @relation(fields: [providerId], references: [id])
  clientId    String
  client      User        @relation("UserProposals", fields: [clientId], references: [id])
  requestId   String
  request     Request     @relation(fields: [requestId], references: [id])
  price       Float
  message     String?
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime     @default(now())
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
}

model Payment {
  id          String      @id @default(cuid())
  requestId   String
  request     Request     @relation(fields: [requestId], references: [id])
  amount      Float
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime     @default(now())
<<<<<<< HEAD
  updatedAt   DateTime     @updatedAt
=======
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
}

model Review {
  id          String      @id @default(cuid())
  clientId    String
  client      User        @relation("UserReviews", fields: [clientId], references: [id])
  providerId  String
  provider    ProviderProfile @relation("ProviderReviews", fields: [providerId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime     @default(now())
<<<<<<< HEAD
  updatedAt   DateTime     @updatedAt
=======
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
