generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  password        String?
  role            Role             @default(USER)
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

<<<<<<< HEAD
  // Relations for IP Toolkit
  calculations    Calculation[]
  knowledgeBase  KnowledgeBaseArticle[] @relation("ArticleAuthor")
=======
<<<<<<< HEAD
  // Back relation to ProviderProfile (1:1)
  providerProfile ProviderProfile?

  // Relations
=======
  // ✅ Back relation to ProviderProfile (1:1)
  providerProfile ProviderProfile?

  // ✅ Relations
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
  requests      Request[]        @relation("ClientRequests")
  proposals     Proposal[]       @relation("UserProposals")
  reviews       Review[]         @relation("UserReviews")
>>>>>>> b17a882604302812a3e97b57236ee5e2b57df7fd
}

model Calculation {
  id          String      @id @default(cuid())
<<<<<<< HEAD
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  title       String?
  wanIp       String      // WAN IP Address
  cidr        Int         // CIDR notation
  result      Json        // Stores the full calculation output as JSON
  createdAt   DateTime    @default(now())
}

model KnowledgeBaseArticle {
  id            String      @id @default(cuid())
  title         String      
  slug          String      @unique
  content       String?
  videoUrl      String?
  routerModels  String[]    // Array of relevant router models
  category      String      // e.g., 'Fiber', 'DSL', 'LTE', 'General'
  authorId      String
  author        User        @relation("ArticleAuthor", fields: [authorId], references: [id])
  published     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model WanIp {
  id          String    @id @default(cuid())
  ipAddress   String    @unique
  cidr        Int
  description String?
  location    String?
  routerModel String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("wan_ips")
}

model RouterModel {
  id          String    @id @default(cuid())
  modelName   String    @unique
  manufacturer String
  type        String    // e.g., 'PE Router', 'Edge Router', 'CPE', 'Home Router'
  capabilities String[]
  tutorialUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("router_models")
}

model EthioTelecomRegion {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String?   // Region code like SWAAZ, EAAZ, WAAZ, etc.
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  interfaces  EthioTelecomInterface[]
  technicians EthioTelecomTechnician[]
  wanIpPools  WanIpPool[]
  
  @@map("ethio_telecom_regions")
}

model EthioTelecomInterface {
  id          String    @id @default(cuid())
  name        String    // Interface name like VBUI100, VBUI101, etc.
  regionId    String
  region      EthioTelecomRegion @relation(fields: [regionId], references: [id])
  ipPoolStart String    // Starting IP address
  ipPoolEnd   String    // Ending IP address
  subnetMask  String    // Subnet mask
  defaultGateway String // Default gateway
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  customerWanIps CustomerWanIp[]
  wanIpPools  WanIpPool[]
  
  @@map("ethio_telecom_interfaces")
}

model EthioTelecomTechnician {
  id          String    @id @default(cuid())
  employeeId  String    @unique // e.g., 14777
  username    String    @unique // e.g., Yohanes.Senbeto
  name        String
  email       String?   @unique
  password    String?    // Hashed password for authentication
  regionId    String?
  region      EthioTelecomRegion? @relation(fields: [regionId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations for IP pool management
  managedWanIps CustomerWanIp[] @relation("TechnicianManaged")
  createdIpPools WanIpPool[] @relation("TechnicianCreated")
  
  @@map("ethio_telecom_technicians")
}

model CustomerWanIp {
  id          String    @id @default(cuid())
  accountNumber String  @unique
  accessNumber String?  @unique
  wanIp       String
  interfaceId String?
  interface   EthioTelecomInterface? @relation(fields: [interfaceId], references: [id])
  customerName String?
  location    String?
  technicianId  String?
  technician  EthioTelecomTechnician? @relation("TechnicianManaged", fields: [technicianId], references: [id])
  assignedAt  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("customer_wan_ips")
}

model WanIpPool {
  id          String    @id @default(cuid())
  poolName    String    @unique
  startIp     String    // Starting IP address of the pool
  endIp       String    // Ending IP address of the pool
  cidr        Int       // CIDR notation for the pool
  regionId    String
  region      EthioTelecomRegion @relation(fields: [regionId], references: [id])
  interfaceId String
  interface   EthioTelecomInterface @relation(fields: [interfaceId], references: [id])
  totalIps    Int       // Total IPs in pool
  availableIps Int      // Available IPs
  usedIps     Int      // Used IPs
  technicianId String
  technician  EthioTelecomTechnician @relation("TechnicianCreated", fields: [technicianId], references: [id])
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("wan_ip_pools")
=======
  userId      String      @unique
<<<<<<< HEAD
  user        User        @relation(fields: [userId], references: [id])  // one-to-one link to User
=======
  user        User        @relation(fields: [userId], references: [id])  // ✅ one-to-one link to User
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b

  skills      String[]
  bio         String?
  services    Service[]
  proposals   Proposal[]
  reviews     Review[]    @relation("ProviderReviews")
}

model Service {
  id          String           @id @default(cuid())
  providerId  String
  provider    ProviderProfile  @relation(fields: [providerId], references: [id])
  title       String
  description String
  price       Float
  createdAt   DateTime         @default(now())
<<<<<<< HEAD
  updatedAt   DateTime         @updatedAt
}

model Request {
  id          String        @id @default(cuid())
  clientId    String
  client      User          @relation("ClientRequests", fields: [clientId], references: [id])
=======
}

model Request {
  id          String      @id @default(cuid())
  clientId    String
  client      User        @relation("ClientRequests", fields: [clientId], references: [id])
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
  title       String
  description String
  status      RequestStatus @default(PENDING)
  proposals   Proposal[]
<<<<<<< HEAD
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) // ✅ default to current time
  payments    Payment[]
}

model Proposal {
  id          String        @id @default(cuid())
  providerId  String
  provider    ProviderProfile @relation(fields: [providerId], references: [id])
  clientId    String
  client      User          @relation("UserProposals", fields: [clientId], references: [id])
  requestId   String
  request     Request       @relation(fields: [requestId], references: [id])
  price       Float
  message     String?
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) // ✅ default to current time
=======
  createdAt   DateTime     @default(now())

  payments    Payment[]   // ✅ renamed field to lowercase for convention
}

model Proposal {
  id          String      @id @default(cuid())
  providerId  String
  provider    ProviderProfile @relation(fields: [providerId], references: [id])
  clientId    String
  client      User        @relation("UserProposals", fields: [clientId], references: [id])
  requestId   String
  request     Request     @relation(fields: [requestId], references: [id])
  price       Float
  message     String?
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime     @default(now())
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
}

model Payment {
  id          String      @id @default(cuid())
  requestId   String
  request     Request     @relation(fields: [requestId], references: [id])
  amount      Float
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime     @default(now())
<<<<<<< HEAD
  updatedAt   DateTime     @updatedAt
=======
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
}

model Review {
  id          String      @id @default(cuid())
  clientId    String
  client      User        @relation("UserReviews", fields: [clientId], references: [id])
  providerId  String
  provider    ProviderProfile @relation("ProviderReviews", fields: [providerId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime     @default(now())
<<<<<<< HEAD
  updatedAt   DateTime     @updatedAt
=======
>>>>>>> f3177dfe03f1aa84833f761eef73058dd29aa04b
>>>>>>> b17a882604302812a3e97b57236ee5e2b57df7fd
}

enum Role {
  USER
  ADMIN
  ETHIO_TELECOM_TECHNICIAN
}
